use std::str::FromStr;
use super::ast::{Expr, Field, Statement};

grammar;

pub Statements = Semicolon<Statement>;

pub Statement: Box<Statement> = {
    <var:Ident> "=" <value:Expr> => Box::new(Statement::Assign {<>}),
    <name:Ident> ":=" <value:Expr> => Box::new(Statement::Pass {<>}),
    <pass:Ident> "->" <dependencies:Comma<Ident>> => Box::new(Statement::Edge {<>}),
    <pass:Ident> "!" => Box::new(Statement::Display {<>}),
};

pub Expr: Box<Expr> = {
    Int => Box::new(Expr::Int(<>)),
    Float => Box::new(Expr::Float(<>)),
    Path => Box::new(Expr::Path(<>)),
    "." <var:Ident> => Box::new(Expr::VarAccess(var)),
    Ident => Box::new(Expr::Ident(<>)),
    <name:Ident> "{" <fields:Fields> "}" => Box::new(Expr::Struct {<>})
};

pub Fields = Comma<Field>;

pub Field: Box<Field> = {
    <ident:Ident> ":" <value:Expr> => Box::new(Field {<>}),
};

Int: i32 = r"[+-]?[0-9]+" => i32::from_str(<>).unwrap();
Float: f32 = r"[+-]?[0-9]+\.[0-9]*|[+-]?\.[0-9]+" => f32::from_str(<>).unwrap();
Path: String = r#"".*""# => String::from(<>);
Ident: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => String::from(<>);

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Semicolon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
